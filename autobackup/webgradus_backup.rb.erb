# encoding: utf-8
require 'yaml'
##
# Backup Generated: webgradus_backup
# Once configured, you can run the backup with the following command:
#
# $ backup perform -t webgradus_backup [-c <path_to_configuration_file>]
#
Backup::Model.new(:webgradus_backup, 'Backup of <%= app_name %>') do

  ##
  # Archive [Archive]
  #
  # Adding a file or directory (including sub-directories):
  #   archive.add "/path/to/a/file.rb"
  #   archive.add "/path/to/a/directory/"
  #
  # Excluding a file or directory (including sub-directories):
  #   archive.exclude "/path/to/an/excluded_file.rb"
  #   archive.exclude "/path/to/an/excluded_directory
  #
  # By default, relative paths will be relative to the directory
  # where `backup perform` is executed, and they will be expanded
  # to the root of the filesystem when added to the archive.
  #
  # If a `root` path is set, relative paths will be relative to the
  # given `root` path and will not be expanded when added to the archive.
  #
  #   archive.root '/path/to/archive/root'
  #
  # For more details, please see:
  # https://github.com/meskyanichi/backup/wiki/Archives
  #
  archive :public do |archive|
    # Run the `tar` command using `sudo`
    # archive.use_sudo
      archive.add 'public/'
      archive.add '../../shared/assets/'
      archive.add '../../shared/system/'
  end


  dbconfig = YAML::load(ERB.new(IO.read(File.join('config', 'database.yml'))).result)['production']
  <% if database == 'mysql' %>
    ##
    # MySQL [Database]
    #
    database MySQL do |db|
      # To dump all databases, set `db.name = :all` (or leave blank)
      db.name               = dbconfig['database']
      db.username           = dbconfig['username']
      db.password           = dbconfig['password']
      db.host               = dbconfig['host']
      # db.port               = 3306
      # db.socket             = "/tmp/mysql.sock"
      # Note: when using `skip_tables` with the `db.name = :all` option,
      # table names should be prefixed with a database name.
      # e.g. ["db_name.table_to_skip", ...]
      # db.skip_tables        = ["skip", "these", "tables"]
      # db.only_tables        = ["only", "these" "tables"]
      # db.additional_options = ["--quick", "--single-transaction"]
      # Optional: Use to set the location of this utility
      #   if it cannot be found by name in your $PATH
      # db.mysqldump_utility = "/opt/local/bin/mysqldump"
    end
  <% elsif database == 'postgresql' %>
    ##
    # PostgreSQL [Database]
    #
    database PostgreSQL do |db|
      db.name               = dbconfig['database']
      db.username           = dbconfig['username']
      db.password           = dbconfig['password']
     # db.host               = "localhost"
     # db.port               = 5432
     # db.socket             = "/tmp/pg.sock"
     # db.skip_tables        = ["skip", "these", "tables"]
     # db.only_tables        = ["only", "these", "tables"]
     # db.additional_options = ["-xc", "-E=utf8"]
    end
  <%end%>
 




  backupconfig = YAML::load(ERB.new(IO.read(File.join('config', 'backup.yml'))).result)

  store_with S3 do |s3|
    s3.bucket            = "gradus.backup"
    s3.path              = "/<%= app_name %>"
    s3.keep              = 10
    s3.access_key_id     = backupconfig['s3_access_key_id']
    s3.secret_access_key = backupconfig['s3_secret_access_key_id']
    s3.region            = "us-east-1"
  end

  ##
  # Gzip [Compressor]
  #
  compress_with Gzip

  ##
  # Mail [Notifier]
  #
  # The default delivery method for Mail Notifiers is 'SMTP'.
  # See the Wiki for other delivery options.
  # https://github.com/meskyanichi/backup/wiki/Notifiers
  #
  notify_by Mail do |mail|
    mail.on_success           = true
    mail.on_warning           = true
    mail.on_failure           = true

    mail.from                 = "webgradus@gmail.com"
    mail.to                   = "webgradus@gmail.com"
    mail.address              = "smtp.gmail.com"
    mail.port                 = 587
    mail.user_name            = backupconfig['mail_user_name']
    mail.password             = backupconfig['mail_password']
    mail.authentication       = "plain"
    mail.encryption           = :starttls
  end

end
